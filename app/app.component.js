"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var orientation = require('nativescript-orientation');
var application = require("tns-core-modules/application");
var router_1 = require("nativescript-angular/router");
// import * as pushPlugin from "nativescript-push-notifications";
var AppComponent = /** @class */ (function () {
    function AppComponent(router) {
        var _this = this;
        this.router = router;
        orientation.setOrientation("portrait");
        application.android.on(application.AndroidApplication.activityBackPressedEvent, function (args) {
            if (_this.router.canGoBack()) {
                args.cancel = true;
                _this.router.back();
            }
            else {
                args.cancel = false;
            }
        });
        // push notification
        // this.message = "";
        // this.updateMessage("App started.");
        // let self = this;
        // this.onRegisterButtonTap();
    }
    AppComponent = __decorate([
        core_1.Component({
            selector: "ns-app",
            templateUrl: "app.component.html",
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions])
    ], AppComponent);
    return AppComponent;
}());
exports.AppComponent = AppComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxzQ0FBMEM7QUFDMUMsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDdEQsMERBQTREO0FBQzVELHNEQUErRDtBQUMvRCxpRUFBaUU7QUFPakU7SUFxQkksc0JBQW9CLE1BQXdCO1FBQTVDLGlCQWlCQztRQWpCbUIsV0FBTSxHQUFOLE1BQU0sQ0FBa0I7UUFDeEMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2QyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsd0JBQXdCLEVBQUUsVUFBQyxJQUFTO1lBQ3RGLEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDbkIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN2QixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDeEIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsb0JBQW9CO1FBQ3BCLHFCQUFxQjtRQUNyQixzQ0FBc0M7UUFFdEMsbUJBQW1CO1FBQ25CLDhCQUE4QjtJQUNsQyxDQUFDO0lBdENRLFlBQVk7UUFMeEIsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFdBQVcsRUFBRSxvQkFBb0I7U0FDcEMsQ0FBQzt5Q0F1QjhCLHlCQUFnQjtPQXJCbkMsWUFBWSxDQWdHeEI7SUFBRCxtQkFBQztDQUFBLEFBaEdELElBZ0dDO0FBaEdZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbnZhciBvcmllbnRhdGlvbiA9IHJlcXVpcmUoJ25hdGl2ZXNjcmlwdC1vcmllbnRhdGlvbicpO1xyXG5pbXBvcnQgKiBhcyBhcHBsaWNhdGlvbiBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvblwiO1xyXG5pbXBvcnQgeyBSb3V0ZXJFeHRlbnNpb25zIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL3JvdXRlclwiO1xyXG4vLyBpbXBvcnQgKiBhcyBwdXNoUGx1Z2luIGZyb20gXCJuYXRpdmVzY3JpcHQtcHVzaC1ub3RpZmljYXRpb25zXCI7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiBcIm5zLWFwcFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiYXBwLmNvbXBvbmVudC5odG1sXCIsXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcclxuXHJcbiAgICAvLyBwcml2YXRlIHB1c2hTZXR0aW5ncyA9IHtcclxuICAgIC8vICAgICAvLyBBbmRyb2lkIHNldHRpbmdzXHJcbiAgICAvLyAgICAgc2VuZGVySUQ6IFwiMjc2NTYxNDg5ODk4XCIsIC8vIEFuZHJvaWQ6IFJlcXVpcmVkIHNldHRpbmcgd2l0aCB0aGUgc2VuZGVyL3Byb2plY3QgbnVtYmVyXHJcbiAgICAvLyAgICAgbm90aWZpY2F0aW9uQ2FsbGJhY2tBbmRyb2lkOiAoc3RyaW5naWZpZWREYXRhOiBTdHJpbmcsIGZjbU5vdGlmaWNhdGlvbjogYW55KSA9PiB7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkJvZHkgPSBmY21Ob3RpZmljYXRpb24gJiYgZmNtTm90aWZpY2F0aW9uLmdldEJvZHkoKTtcclxuICAgIC8vICAgICAgICAgdGhpcy51cGRhdGVNZXNzYWdlKFwiTWVzc2FnZSByZWNlaXZlZCFcXG5cIiArIG5vdGlmaWNhdGlvbkJvZHkgKyBcIlxcblwiICsgc3RyaW5naWZpZWREYXRhKTtcclxuICAgIC8vICAgICB9LFxyXG5cclxuICAgIC8vICAgICAvLyBpT1Mgc2V0dGluZ3NcclxuICAgIC8vICAgICBiYWRnZTogdHJ1ZSwgLy8gRW5hYmxlIHNldHRpbmcgYmFkZ2UgdGhyb3VnaCBQdXNoIE5vdGlmaWNhdGlvblxyXG4gICAgLy8gICAgIHNvdW5kOiB0cnVlLCAvLyBFbmFibGUgcGxheWluZyBhIHNvdW5kXHJcbiAgICAvLyAgICAgYWxlcnQ6IHRydWUsIC8vIEVuYWJsZSBjcmVhdGluZyBhIGFsZXJ0XHJcbiAgICAvLyAgICAgbm90aWZpY2F0aW9uQ2FsbGJhY2tJT1M6IChtZXNzYWdlOiBhbnkpID0+IHtcclxuICAgIC8vICAgICAgICAgdGhpcy51cGRhdGVNZXNzYWdlKFwiTWVzc2FnZSByZWNlaXZlZCFcXG5cIiArIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9O1xyXG4gICAgcHJpdmF0ZSBfY291bnRlcjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfbWVzc2FnZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXJFeHRlbnNpb25zKSB7XHJcbiAgICAgICAgb3JpZW50YXRpb24uc2V0T3JpZW50YXRpb24oXCJwb3J0cmFpdFwiKTtcclxuICAgICAgICBhcHBsaWNhdGlvbi5hbmRyb2lkLm9uKGFwcGxpY2F0aW9uLkFuZHJvaWRBcHBsaWNhdGlvbi5hY3Rpdml0eUJhY2tQcmVzc2VkRXZlbnQsIChhcmdzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucm91dGVyLmNhbkdvQmFjaygpKSB7XHJcbiAgICAgICAgICAgICAgICBhcmdzLmNhbmNlbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5iYWNrKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhcmdzLmNhbmNlbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHB1c2ggbm90aWZpY2F0aW9uXHJcbiAgICAgICAgLy8gdGhpcy5tZXNzYWdlID0gXCJcIjtcclxuICAgICAgICAvLyB0aGlzLnVwZGF0ZU1lc3NhZ2UoXCJBcHAgc3RhcnRlZC5cIik7XHJcblxyXG4gICAgICAgIC8vIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICAvLyB0aGlzLm9uUmVnaXN0ZXJCdXR0b25UYXAoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXQgbWVzc2FnZSgpOiBzdHJpbmcge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLl9tZXNzYWdlO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHNldCBtZXNzYWdlKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIC8vICAgICBpZiAodGhpcy5fbWVzc2FnZSAhPT0gdmFsdWUpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy5fbWVzc2FnZSA9IHZhbHVlO1xyXG4gICAgLy8gICAgICAgICAvLyB0aGlzLm5vdGlmeVByb3BlcnR5Q2hhbmdlKFwibWVzc2FnZVwiLCB2YWx1ZSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIG9uQ2hlY2tCdXR0b25UYXAoKSB7XHJcbiAgICAvLyAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgLy8gICAgIHB1c2hQbHVnaW4uYXJlTm90aWZpY2F0aW9uc0VuYWJsZWQoKGFyZUVuYWJsZWQ6IEJvb2xlYW4pID0+IHtcclxuICAgIC8vICAgICAgICAgc2VsZi51cGRhdGVNZXNzYWdlKFwiQXJlIE5vdGlmaWNhdGlvbnMgZW5hYmxlZDogXCIgKyAhIWFyZUVuYWJsZWQpO1xyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIG9uUmVnaXN0ZXJCdXR0b25UYXAoKSB7XHJcbiAgICAvLyAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgLy8gICAgIHB1c2hQbHVnaW4ucmVnaXN0ZXIodGhpcy5wdXNoU2V0dGluZ3MsICh0b2tlbjogU3RyaW5nKSA9PiB7XHJcbiAgICAvLyAgICAgICAgIHNlbGYudXBkYXRlTWVzc2FnZShcIkRldmljZSByZWdpc3RlcmVkLiBBY2Nlc3MgdG9rZW46IFwiICsgdG9rZW4pO1xyXG4gICAgLy8gICAgICAgICAvLyB0b2tlbiBkaXNwbGF5ZWQgaW4gY29uc29sZSBmb3IgZWFzaWVyIGNvcHlpbmcgYW5kIGRlYnVnZ2luZyBkdXJuZyBkZXZlbG9wbWVudFxyXG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhcIkRldmljZSByZWdpc3RlcmVkLiBBY2Nlc3MgdG9rZW46IFwiICsgdG9rZW4pO1xyXG5cclxuICAgIC8vICAgICAgICAgaWYgKHB1c2hQbHVnaW4ucmVnaXN0ZXJVc2VyTm90aWZpY2F0aW9uU2V0dGluZ3MpIHtcclxuICAgIC8vICAgICAgICAgICAgIHB1c2hQbHVnaW4ucmVnaXN0ZXJVc2VyTm90aWZpY2F0aW9uU2V0dGluZ3MoKCkgPT4ge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlTWVzc2FnZShcIlN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkIGZvciBpbnRlcmFjdGl2ZSBwdXNoLlwiKTtcclxuICAgIC8vICAgICAgICAgICAgIH0sIChlcnIpID0+IHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZU1lc3NhZ2UoXCJFcnJvciByZWdpc3RlcmluZyBmb3IgaW50ZXJhY3RpdmUgcHVzaDogXCIgKyBKU09OLnN0cmluZ2lmeShlcnIpKTtcclxuICAgIC8vICAgICAgICAgICAgIH0pO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfSwgKGVycm9yTWVzc2FnZTogU3RyaW5nKSA9PiB7XHJcbiAgICAvLyAgICAgICAgIHNlbGYudXBkYXRlTWVzc2FnZShKU09OLnN0cmluZ2lmeShlcnJvck1lc3NhZ2UpKTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBvblVucmVnaXN0ZXJCdXR0b25UYXAoKSB7XHJcbiAgICAvLyAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgLy8gICAgIHB1c2hQbHVnaW4udW5yZWdpc3RlcihcclxuICAgIC8vICAgICAgICAgKHN1Y2Nlc3NNZXNzYWdlOiBTdHJpbmcpID0+IHtcclxuICAgIC8vICAgICAgICAgICAgIHNlbGYudXBkYXRlTWVzc2FnZShzdWNjZXNzTWVzc2FnZSk7XHJcbiAgICAvLyAgICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgIChlcnJvck1lc3NhZ2U6IFN0cmluZykgPT4ge1xyXG4gICAgLy8gICAgICAgICAgICAgc2VsZi51cGRhdGVNZXNzYWdlKEpTT04uc3RyaW5naWZ5KGVycm9yTWVzc2FnZSkpO1xyXG4gICAgLy8gICAgICAgICB9LFxyXG4gICAgLy8gICAgICAgICB0aGlzLnB1c2hTZXR0aW5nc1xyXG4gICAgLy8gICAgICk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gcHJpdmF0ZSB1cGRhdGVNZXNzYWdlKHRleHQ6IFN0cmluZykge1xyXG4gICAgLy8gICAgIHRoaXMubWVzc2FnZSArPSB0ZXh0ICsgXCJcXG5cIjtcclxuICAgIC8vIH1cclxuXHJcblxyXG5cclxufVxyXG4iXX0=